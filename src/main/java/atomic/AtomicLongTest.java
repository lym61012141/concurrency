package atomic;

import java.util.concurrent.atomic.AtomicLong;

/**
 * 多线程下测试AtomicLong 原子性
 * @author Liuym
 * @date 2019/1/5 0005
 */
public class AtomicLongTest {
    private static AtomicLong atomicLong = new AtomicLong();
    private static int count =0;
    private static Integer[] arrA = new Integer[]{0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0,0, 1, 3, 0, 1, 0, 2, 5, 0};
    public static void main(String[] args) throws InterruptedException {
        Thread threadA = new Thread(() -> {

            for (int i = 0; i < arrA.length; i++) {
                if (arrA[i] == 0) {
                    atomicLong.incrementAndGet();
                    count++;
                }
            }
        });

        Thread threadB = new Thread(() -> {
            for (int i = 0; i < arrA.length; i++) {
                if (arrA[i] == 0) {
                    atomicLong.incrementAndGet();
                    count++;
                }
            }
        });

        Thread threadC = new Thread(() -> {
            for (int i = 0; i < arrA.length; i++) {
                if (arrA[i] == 0) {
                    atomicLong.incrementAndGet();
                    count++;
                }
            }
        });

        Thread threadD = new Thread(() -> {
            for (int i = 0; i < arrA.length; i++) {
                if (arrA[i] == 0) {
                    atomicLong.incrementAndGet();
                    count++;
                }
            }
        });
        threadA.start();
        threadB.start();
        threadC.start();
        threadD.start();
        threadA.join();
        threadB.join();
        threadC.join();
        threadD.join();
        System.out.println(atomicLong.get());
        System.out.println(count);

    }
}
